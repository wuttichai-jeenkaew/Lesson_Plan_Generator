"use client";

import { useEffect, useState } from "react";
import { useForm, useFieldArray } from "react-hook-form";
import { zodResolver } from "@hookform/resolvers/zod";
import { lessonPlanInputSchema, type LessonPlanInput, type ImageItem } from "@/lib/schemas";
import { useRouter } from "next/navigation";
import axios from "axios";

export default function NewPlanPage() {
  const router = useRouter();

  const [submitStatus, setSubmitStatus] = useState<'idle' | 'loading' | 'success' | 'error'>('idle');
  const [submitMessage, setSubmitMessage] = useState('');
  const [formProgress, setFormProgress] = useState(0);
  const [autoSaving, setAutoSaving] = useState(false);

  // Dropdown options
  const levelOptions = [
    { value: '‡∏õ.1', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 (‡∏õ.1)' },
    { value: '‡∏õ.2', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2 (‡∏õ.2)' },
    { value: '‡∏õ.3', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3 (‡∏õ.3)' },
    { value: '‡∏õ.4', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 4 (‡∏õ.4)' },
    { value: '‡∏õ.5', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 5 (‡∏õ.5)' },
    { value: '‡∏õ.6', label: '‡∏õ‡∏£‡∏∞‡∏ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 6 (‡∏õ.6)' },
    { value: '‡∏°.1', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 1 (‡∏°.1)' },
    { value: '‡∏°.2', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 2 (‡∏°.2)' },
    { value: '‡∏°.3', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 3 (‡∏°.3)' },
    { value: '‡∏°.4', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 4 (‡∏°.4)' },
    { value: '‡∏°.5', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 5 (‡∏°.5)' },
    { value: '‡∏°.6', label: '‡∏°‡∏±‡∏ò‡∏¢‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡∏õ‡∏µ‡∏ó‡∏µ‡πà 6 (‡∏°.6)' },
  ];

  const subjectOptions = [
    { value: '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢', label: '‡∏†‡∏≤‡∏©‡∏≤‡πÑ‡∏ó‡∏¢' },
    { value: '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏Ñ‡∏ì‡∏¥‡∏ï‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏ß‡∏¥‡∏ó‡∏¢‡∏≤‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤', label: '‡∏™‡∏±‡∏á‡∏Ñ‡∏°‡∏®‡∏∂‡∏Å‡∏©‡∏≤ ‡∏®‡∏≤‡∏™‡∏ô‡∏≤ ‡πÅ‡∏•‡∏∞‡∏ß‡∏±‡∏í‡∏ô‡∏ò‡∏£‡∏£‡∏°' },
    { value: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå', label: '‡∏õ‡∏£‡∏∞‡∏ß‡∏±‡∏ï‡∏¥‡∏®‡∏≤‡∏™‡∏ï‡∏£‡πå' },
    { value: '‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©', label: '‡∏†‡∏≤‡∏©‡∏≤‡∏≠‡∏±‡∏á‡∏Å‡∏§‡∏©' },
    { value: '‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤', label: '‡∏™‡∏∏‡∏Ç‡∏®‡∏∂‡∏Å‡∏©‡∏≤‡πÅ‡∏•‡∏∞‡∏û‡∏•‡∏®‡∏∂‡∏Å‡∏©‡∏≤' },
    { value: '‡∏®‡∏¥‡∏•‡∏õ‡∏∞', label: '‡∏®‡∏¥‡∏•‡∏õ‡∏∞' },
    { value: '‡∏î‡∏ô‡∏ï‡∏£‡∏µ', label: '‡∏î‡∏ô‡∏ï‡∏£‡∏µ' },
    { value: '‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û', label: '‡∏Å‡∏≤‡∏£‡∏á‡∏≤‡∏ô‡∏≠‡∏≤‡∏ä‡∏µ‡∏û' },
    { value: '‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå', label: '‡πÄ‡∏ó‡∏Ñ‡πÇ‡∏ô‡πÇ‡∏•‡∏¢‡∏µ (‡∏Ñ‡∏≠‡∏°‡∏û‡∏¥‡∏ß‡πÄ‡∏ï‡∏≠‡∏£‡πå)' },
    { value: '‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏µ‡∏ô', label: '‡∏†‡∏≤‡∏©‡∏≤‡∏à‡∏µ‡∏ô' },
    { value: '‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô', label: '‡∏†‡∏≤‡∏©‡∏≤‡∏ç‡∏µ‡πà‡∏õ‡∏∏‡πà‡∏ô' },
    { value: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ', label: '‡∏≠‡∏∑‡πà‡∏ô‡πÜ' },
  ];

  const { register, control, handleSubmit, watch, setValue, formState: { errors } } =
    useForm<LessonPlanInput>({
      resolver: zodResolver(lessonPlanInputSchema),
      defaultValues: {
        level: "",
        subject: "",
        unit_name: "",
        objectives: [""],
        activities: [""],
        assessment: "",
        images: [],
      },
    });


  const objectives = useFieldArray({ 
    control, 
    name: "objectives" as any
  });
  const activities = useFieldArray({ 
    control, 
    name: "activities" as any
  });
  const unitName = watch("unit_name");
  const formValues = watch();

  // Calculate form completion progress
  useEffect(() => {
    const values = formValues;
    let completed = 0;
    const total = 6; // level, subject, unit_name, objectives, activities, assessment
    
    if (values.level) completed++;
    if (values.subject) completed++;
    if (values.unit_name) completed++;
    if (values.objectives?.some(obj => obj.trim())) completed++;
    if (values.activities?.some(act => act.trim())) completed++;
    if (values.assessment?.trim()) completed++;
    
    setFormProgress(Math.round((completed / total) * 100));
  }, [formValues]);

  // Auto-save to localStorage (draft)
  useEffect(() => {
    const autoSaveTimer = setTimeout(() => {
      if (formValues.unit_name || formValues.level || formValues.subject) {
        setAutoSaving(true);
        localStorage.setItem('lesson_plan_draft', JSON.stringify(formValues));
        setTimeout(() => setAutoSaving(false), 1000);
      }
    }, 10000);

    return () => clearTimeout(autoSaveTimer);
  }, [formValues]);

  // Load draft on mount
  useEffect(() => {
    const draft = localStorage.getItem('lesson_plan_draft');
    if (draft) {
      try {
        const parsed = JSON.parse(draft);
        Object.keys(parsed).forEach(key => {
          if (parsed[key] && key !== 'images') {
            setValue(key as keyof LessonPlanInput, parsed[key]);
          }
        });
      } catch (error) {
        console.error('Failed to parse draft:', error);
        // Ignore invalid draft
      }
    }
  }, [setValue]);

  // Clear draft after successful submission


  const [imageResults, setImageResults] = useState<ImageItem[]>([]);
  const [loadingImg, setLoadingImg] = useState(false);
  const [selectedUrl, setSelectedUrl] = useState<string | null>(
    (watch("images")?.[0]?.url as string) ?? null
  );

  // ‡∏î‡∏∂‡∏á‡∏£‡∏π‡∏õ‡πÅ‡∏ö‡∏ö debounce ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡∏Å‡∏£‡∏≠‡∏Å unit_name
  useEffect(() => {
    if (!unitName || unitName.trim().length < 2) return;
    const id = setTimeout(async () => {
      try {
        setLoadingImg(true);
        const r = await axios.get(`/api/images?query=${encodeURIComponent(unitName)}`);
        setImageResults(r.data.images ?? []);
      } catch (error) {
        console.error('Failed to fetch images:', error);
        setImageResults([]);
      } finally {
        setLoadingImg(false);
      }
    }, 500);
    return () => clearTimeout(id);
  }, [unitName]);

  // sync selectedUrl ‡∏Å‡∏±‡∏ö‡∏Ñ‡πà‡∏≤‡∏ü‡∏≠‡∏£‡πå‡∏°
  useEffect(() => {
    const url = (watch("images")?.[0]?.url as string) ?? null;
    setSelectedUrl(url);
    // eslint-disable-next-line react-hooks/exhaustive-deps
  }, []);

  function pickImage(img: ImageItem) {
    setValue("images", [img], { shouldValidate: true });
    setSelectedUrl(img.url);
  }

  function unpickImage() {
    setValue("images", [], { shouldValidate: true });
    setSelectedUrl(null);
  }

  async function onSubmit(values: LessonPlanInput) {
    console.log('üöÄ onSubmit called with values:', values);
    console.log('üîç Validation check:');
    
    // ‡∏ó‡∏≥‡∏Ñ‡∏ß‡∏≤‡∏°‡∏™‡∏∞‡∏≠‡∏≤‡∏î‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á - ‡∏•‡∏ö empty strings ‡∏≠‡∏≠‡∏Å
    const cleanedValues = {
      ...values,
      objectives: values.objectives.filter(obj => obj.trim() !== ''),
      activities: values.activities.filter(act => act.trim() !== ''),
    };
    
    console.log('üßπ Cleaned values:', cleanedValues);
    
    // ‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö validation ‡∏Å‡πà‡∏≠‡∏ô‡∏™‡πà‡∏á
    const validation = lessonPlanInputSchema.safeParse(cleanedValues);
    if (!validation.success) {
      console.error('‚ùå Validation failed:', validation.error.issues);
      setSubmitStatus('error');
      setSubmitMessage(`‚ùå ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÑ‡∏°‡πà‡∏ñ‡∏π‡∏Å‡∏ï‡πâ‡∏≠‡∏á: ${validation.error.issues[0].message}`);
      return;
    }
    
    try {
      setSubmitStatus('loading');
      setSubmitMessage('‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô...');
      
      console.log('üì§ Sending POST request to /api/lesson_plans');
      const res = await axios.post("/api/lesson_plans", cleanedValues);
      const result = res.data;
      console.log('‚úÖ Response received:', result);
      
      setSubmitStatus('success');
      setSubmitMessage('‚úÖ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏™‡∏≥‡πÄ‡∏£‡πá‡∏à!');

      

      setTimeout(() => {
        console.log('üîÑ Redirecting to:', `/plan/${result.id}`);
        router.push(`/plan/${result.id}`);
      }, 1000);
      
    } catch (error: unknown) {
      console.error('‚ùå Submit error:', error);
      setSubmitStatus('error');
      
      if (axios.isAxiosError(error)) {
        const responseData = error.response?.data;
        if (responseData && typeof responseData === 'object' && 'error' in responseData) {
          setSubmitMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${responseData.error}`);
        } else {
          setSubmitMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
        }
      } else if (error instanceof Error) {
        setSubmitMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ${error.message}`);
      } else {
        setSubmitMessage(`‚ùå ‡πÄ‡∏Å‡∏¥‡∏î‡∏Ç‡πâ‡∏≠‡∏ú‡∏¥‡∏î‡∏û‡∏•‡∏≤‡∏î: ‡πÑ‡∏°‡πà‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÑ‡∏î‡πâ`);
      }
      
      // ‡∏•‡πâ‡∏≤‡∏á error message ‡∏´‡∏•‡∏±‡∏á 5 ‡∏ß‡∏¥‡∏ô‡∏≤‡∏ó‡∏µ
      setTimeout(() => {
        setSubmitStatus('idle');
        setSubmitMessage('');
      }, 5000);
    }
  }

  return (
    <div className="max-w-3xl mx-auto p-4 md:p-8">
      <div className="bg-white rounded-xl shadow-lg p-6 md:p-8 border">
        {/* Header with Progress */}
        <div className="mb-6">
          <h1 className="text-3xl font-extrabold text-gray-900 mb-4">üìö ‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÉ‡∏´‡∏°‡πà</h1>
          
          {/* Progress Bar */}
          <div className="mb-4">
            <div className="flex justify-between items-center mb-2">
              <span className="text-sm font-medium text-gray-700">‡∏Ñ‡∏ß‡∏≤‡∏°‡∏Ñ‡∏∑‡∏ö‡∏´‡∏ô‡πâ‡∏≤</span>
              <span className="text-sm text-gray-500">{formProgress}% ‡πÄ‡∏™‡∏£‡πá‡∏à‡∏™‡∏¥‡πâ‡∏ô</span>
            </div>
            <div className="w-full bg-gray-200 rounded-full h-2">
              <div 
                className="bg-blue-600 h-2 rounded-full transition-all duration-300"
                style={{ width: `${formProgress}%` }}
              ></div>
            </div>
          </div>

          {/* Auto-save Indicator */}
          {autoSaving && (
            <div className="flex items-center gap-2 text-sm text-green-600 mb-2">
              <div className="animate-spin rounded-full h-3 w-3 border-b-2 border-green-600"></div>
              ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ö‡∏ö‡∏£‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥...
            </div>
          )}
        </div>
        
        {/* Status Message */}
        {submitMessage && (
          <div className={`mb-6 p-4 rounded-lg border ${
            submitStatus === 'success' ? 'bg-green-50 border-green-200 text-green-800' :
            submitStatus === 'error' ? 'bg-red-50 border-red-200 text-red-800' :
            'bg-blue-50 border-blue-200 text-blue-800'
          }`}>
            <div className="flex items-center gap-2">
              {submitStatus === 'loading' && (
                <div className="animate-spin rounded-full h-4 w-4 border-b-2 border-blue-600"></div>
              )}
              <span>{submitMessage}</span>
            </div>
          </div>
        )}

        <form className="space-y-6" onSubmit={(e) => {
          console.log('üìù Form onSubmit triggered!', e);
          e.preventDefault(); // ‡∏õ‡πâ‡∏≠‡∏á‡∏Å‡∏±‡∏ô default behavior
          
          // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤ form ‡∏°‡∏µ error ‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
          const hasErrors = Object.keys(errors).length > 0;
          console.log('üîç Form errors:', errors);
          console.log('‚ùå Has errors:', hasErrors);
          
          if (hasErrors) {
            console.log('‚ö†Ô∏è Form has validation errors, not submitting');
            setSubmitStatus('error');
            setSubmitMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏ï‡∏£‡∏ß‡∏à‡∏™‡∏≠‡∏ö‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏´‡πâ‡∏Ñ‡∏£‡∏ö‡∏ñ‡πâ‡∏ß‡∏ô');
            return;
          }
          
          return handleSubmit(onSubmit)(e);
        }}>
          <div className="grid grid-cols-1 md:grid-cols-2 gap-4">
            <div>
              <label className="block text-gray-700 font-medium mb-1">
                ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô <span className="text-red-500">*</span>
              </label>
              <select className="select" {...register("level")}>
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô --</option>
                {levelOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              {errors.level && <p className="err">{errors.level.message}</p>}
            </div>
            <div>
              <label className="block text-gray-700 font-medium mb-1">
                ‡∏ß‡∏¥‡∏ä‡∏≤ <span className="text-red-500">*</span>
              </label>
              <select className="select" {...register("subject")}>
                <option value="">-- ‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏ß‡∏¥‡∏ä‡∏≤ --</option>
                {subjectOptions.map(option => (
                  <option key={option.value} value={option.value}>
                    {option.label}
                  </option>
                ))}
              </select>
              {errors.subject && <p className="err">{errors.subject.message}</p>}
            </div>
            <div className="md:col-span-2">
              <label className="block text-gray-700 font-medium mb-1">
                ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ <span className="text-red-500">*</span>
              </label>
              <input 
                className="input" 
                placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ö‡∏ß‡∏Å‡πÄ‡∏•‡∏Ç, ‡∏õ‡∏£‡∏∞‡πÇ‡∏¢‡∏Ñ‡πÅ‡∏•‡∏∞‡∏Ñ‡∏≥, ‡∏£‡∏∞‡∏ö‡∏ö‡∏™‡∏∏‡∏£‡∏¥‡∏¢‡∏∞" 
                {...register("unit_name")}
                onFocus={() => {
                  // Show helpful tips
                  if (!unitName) {
                    setSubmitMessage('üí° ‡πÄ‡∏Ñ‡∏•‡πá‡∏î‡∏•‡∏±‡∏ö: ‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏à‡∏∞‡∏ä‡πà‡∏ß‡∏¢‡πÉ‡∏ô‡∏Å‡∏≤‡∏£‡∏Ñ‡πâ‡∏ô‡∏´‡∏≤‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á');
                    setTimeout(() => setSubmitMessage(''), 3000);
                  }
                }}
              />
              {errors.unit_name && <p className="err">{errors.unit_name.message}</p>}
              
              {/* Character count */}
              <div className="flex justify-between items-center mt-1">
                <span className="text-xs text-gray-500">
                  {unitName?.length || 0} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                </span>
                {unitName && unitName.length > 3 && (
                  <span className="text-xs text-green-600">‚úì ‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß</span>
                )}
              </div>
            </div>
          </div>
          <hr className="my-6 border-gray-200" />
          <div>
            <label className="font-semibold text-lg text-gray-800 flex items-center gap-2">
              üéØ ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ <span className="text-red-500">*</span>
              <span className="text-sm font-normal text-gray-600">({objectives.fields.length} ‡∏Ç‡πâ‡∏≠)</span>
            </label>
            <p className="text-sm text-gray-600 mb-3">‡∏£‡∏∞‡∏ö‡∏∏‡∏™‡∏¥‡πà‡∏á‡∏ó‡∏µ‡πà‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÉ‡∏´‡πâ‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏à‡∏≤‡∏Å‡∏ö‡∏ó‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏ô‡∏µ‡πâ</p>
            <div className="space-y-3 mt-2">
              {objectives.fields.map((f, i) => (
                <div key={f.id} className="flex gap-2 items-start">
                  <span className="text-gray-500 text-sm mt-3 min-w-[30px]">{i + 1}.</span>
                  <div className="flex-1">
                    <input 
                      key={f.id} 
                      className="input" 
                      placeholder={`‡∏£‡∏∞‡∏ö‡∏∏‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${i + 1}`} 
                      {...register(`objectives.${i}` as const)} 
                    />
                    {/* Character count for each objective */}
                    <div className="text-xs text-gray-400 mt-1">
                      {watch(`objectives.${i}`)?.length || 0} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    </div>
                  </div>
                  {objectives.fields.length > 1 && (
                    <button 
                      type="button" 
                      className="btn-danger mt-1"
                      onClick={() => objectives.remove(i)}
                      title="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ"
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>
              ))}
            </div>
            <div className="flex gap-2 mt-3">
              {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
              <button type="button" className="btn-success" onClick={() => objectives.append("" as any)}>
                ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
              </button>
              {objectives.fields.length >= 3 && (
                <div className="text-xs text-gray-500 flex items-center">
                  üí° ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡πÄ‡∏û‡∏µ‡∏¢‡∏á‡∏û‡∏≠‡πÅ‡∏•‡πâ‡∏ß
                </div>
              )}
            </div>
            {errors.objectives && <p className="err">{errors.objectives.message as string}</p>}
          </div>
          
          <div>
            <label className="font-semibold text-lg text-gray-800 flex items-center gap-2">
              üìù ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô <span className="text-red-500">*</span>
              <span className="text-sm font-normal text-gray-600">({activities.fields.length} ‡∏Ç‡πâ‡∏≠)</span>
            </label>
            <p className="text-sm text-gray-600 mb-3">‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏Ç‡∏±‡πâ‡∏ô‡∏ï‡∏≠‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡πÅ‡∏•‡∏∞‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡∏ó‡∏µ‡πà‡∏à‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£</p>
            <div className="space-y-3 mt-2">
              {activities.fields.map((f, i) => (
                <div key={f.id} className="flex gap-2 items-start">
                  <span className="text-gray-500 text-sm mt-3 min-w-[30px]">{i + 1}.</span>
                  <div className="flex-1">
                    <input 
                      key={f.id} 
                      className="input" 
                      placeholder={`‡∏£‡∏∞‡∏ö‡∏∏‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Ç‡πâ‡∏≠‡∏ó‡∏µ‡πà ${i + 1}`} 
                      {...register(`activities.${i}` as const)} 
                    />
                    {/* Character count for each activity */}
                    <div className="text-xs text-gray-400 mt-1">
                      {watch(`activities.${i}`)?.length || 0} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
                    </div>
                  </div>
                  {activities.fields.length > 1 && (
                    <button 
                      type="button" 
                      className="btn-danger mt-1"
                      onClick={() => activities.remove(i)}
                      title="‡∏•‡∏ö‡∏Ç‡πâ‡∏≠‡∏ô‡∏µ‡πâ"
                    >
                      üóëÔ∏è
                    </button>
                  )}
                </div>
              ))}
            </div>
            <div className="flex gap-2 mt-3">
              {/* eslint-disable-next-line @typescript-eslint/no-explicit-any */}
              <button type="button" className="btn-success" onClick={() => activities.append("" as any)}>
                ‚ûï ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
              </button>
              {activities.fields.length >= 5 && (
                <div className="text-xs text-gray-500 flex items-center">
                  üí° ‡∏Ñ‡∏∏‡∏ì‡∏°‡∏µ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏´‡∏•‡∏≤‡∏Å‡∏´‡∏•‡∏≤‡∏¢‡πÅ‡∏•‡πâ‡∏ß
                </div>
              )}
            </div>
            {errors.activities && <p className="err">{errors.activities.message as string}</p>}
          </div>
          <div>
            <label className="font-semibold text-lg text-gray-800 flex items-center gap-2">
              üìä ‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏• <span className="text-red-500">*</span>
            </label>
            <p className="text-sm text-gray-600 mb-3">‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏ß‡∏±‡∏î‡πÅ‡∏•‡∏∞‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏Ç‡∏≠‡∏á‡∏ô‡∏±‡∏Å‡πÄ‡∏£‡∏µ‡∏¢‡∏ô</p>
            <textarea 
              className="textarea mt-2" 
              placeholder="‡πÄ‡∏ä‡πà‡∏ô ‡∏Å‡∏≤‡∏£‡∏ó‡∏î‡∏™‡∏≠‡∏ö‡∏Å‡πà‡∏≠‡∏ô‡πÄ‡∏£‡∏µ‡∏¢‡∏ô-‡∏´‡∏•‡∏±‡∏á‡πÄ‡∏£‡∏µ‡∏¢‡∏ô, ‡∏Å‡∏≤‡∏£‡∏™‡∏±‡∏á‡πÄ‡∏Å‡∏ï‡∏û‡∏§‡∏ï‡∏¥‡∏Å‡∏£‡∏£‡∏°, ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ä‡∏¥‡πâ‡∏ô‡∏á‡∏≤‡∏ô" 
              rows={4}
              {...register("assessment")} 
            />
            {/* Character count for assessment */}
            <div className="flex justify-between items-center mt-1">
              <span className="text-xs text-gray-500">
                {watch("assessment")?.length || 0} ‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£
              </span>
              {watch("assessment") && watch("assessment").length > 20 && (
                <span className="text-xs text-green-600">‚úì ‡∏£‡∏≤‡∏¢‡∏•‡∏∞‡πÄ‡∏≠‡∏µ‡∏¢‡∏î‡∏î‡∏µ‡πÅ‡∏•‡πâ‡∏ß</span>
              )}
            </div>
            {errors.assessment && <p className="err">{errors.assessment.message}</p>}
          </div>
          <div>
            <div className="flex items-center gap-2 mb-2">
              <span className="font-semibold text-gray-800">üñºÔ∏è ‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÅ‡∏ô‡∏∞‡∏ô‡∏≥‡∏à‡∏≤‡∏Å‡∏Ñ‡∏≥‡∏ß‡πà‡∏≤:</span>
              <em className="text-blue-700">{unitName || "-"}</em>
              {loadingImg && <span className="text-xs text-gray-500">‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏Ñ‡πâ‡∏ô‡∏£‡∏π‡∏õ‚Ä¶</span>}
            </div>

            {/* Skeleton ‡∏£‡∏∞‡∏´‡∏ß‡πà‡∏≤‡∏á‡πÇ‡∏´‡∏•‡∏î */}
            {loadingImg && (
              <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mt-2">
                {[...Array(3)].map((_, i) => (
                  <div key={i} className="h-32 rounded-lg bg-gray-100 animate-pulse" />
                ))}
              </div>
            )}

            {/* Empty state ‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÑ‡∏°‡πà‡∏°‡∏µ‡∏£‡∏π‡∏õ */}
            {!loadingImg && unitName && imageResults.length === 0 && (
              <p className="text-sm text-gray-500 mt-2">
                ‡πÑ‡∏°‡πà‡∏û‡∏ö‡∏£‡∏π‡∏õ‡∏ó‡∏µ‡πà‡πÄ‡∏Å‡∏µ‡πà‡∏¢‡∏ß‡∏Ç‡πâ‡∏≠‡∏á ‡∏•‡∏≠‡∏á‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏Ñ‡∏≥‡∏Ñ‡πâ‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡∏™‡∏∞‡∏Å‡∏î‡πÉ‡∏´‡∏°‡πà‡∏î‡∏π‡∏ô‡∏∞‡∏Ñ‡∏£‡∏±‡∏ö
              </p>
            )}

            {/* ‡∏Å‡∏£‡∏¥‡∏î‡∏£‡∏π‡∏õ */}
            <div className="grid grid-cols-2 md:grid-cols-3 gap-3 mt-2">
              {imageResults.map((img, idx) => {
                const active = selectedUrl === img.url;
                return (
                  <button
                    type="button"
                    key={idx}
                    className={
                      "relative border rounded-lg overflow-hidden transition focus:outline-none focus:ring-2 focus:ring-blue-500 " +
                      (active ? "ring-2 ring-blue-600" : "hover:ring-2 hover:ring-blue-300")
                    }
                    onClick={() => pickImage(img)}
                    title={active ? "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡πÅ‡∏•‡πâ‡∏ß" : "‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û‡∏ô‡∏µ‡πâ"}
                    aria-pressed={active}
                  >
                    {/* eslint-disable-next-line @next/next/no-img-element */}
                    <img src={img.url} alt={img.alt} className="w-full h-32 object-cover" />
                    <div className="p-1 text-[11px] text-gray-600 bg-white/80">{img.attribution}</div>
                    {active && (
                      <span className="absolute top-1 right-1 bg-white/90 text-[10px] px-1.5 py-0.5 rounded shadow">
                        Selected
                      </span>
                    )}
                  </button>
                );
              })}
            </div>

            {/* ‡∏õ‡∏∏‡πà‡∏°‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å */}
            {selectedUrl && (
              <div className="mt-2">
                <button type="button" className="btn" onClick={unpickImage}>
                  ‡∏¢‡∏Å‡πÄ‡∏•‡∏¥‡∏Å‡∏Å‡∏≤‡∏£‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏†‡∏≤‡∏û
                </button>
              </div>
            )}

            {/* ‡∏Ñ‡∏≥‡∏≠‡∏ò‡∏¥‡∏ö‡∏≤‡∏¢‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï */}
            <p className="text-xs text-gray-600 mt-2">
              * ‡∏£‡∏π‡∏õ‡∏†‡∏≤‡∏û‡∏°‡∏≤‡∏à‡∏≤‡∏Å Unsplash/Pixabay ‡πÇ‡∏õ‡∏£‡∏î‡∏£‡∏∞‡∏ö‡∏∏‡πÄ‡∏Ñ‡∏£‡∏î‡∏¥‡∏ï‡πÄ‡∏°‡∏∑‡πà‡∏≠‡πÉ‡∏ä‡πâ‡∏á‡∏≤‡∏ô‡πÉ‡∏ô‡πÄ‡∏≠‡∏Å‡∏™‡∏≤‡∏£
            </p>

            {/* ‡∏ñ‡πâ‡∏≤‡∏ö‡∏±‡∏á‡∏Ñ‡∏±‡∏ö‡∏ï‡πâ‡∏≠‡∏á‡∏°‡∏µ‡∏£‡∏π‡∏õ ‡πÉ‡∏´‡πâ‡πÇ‡∏ä‡∏ß‡πå error */}
            {errors.images && (
              // eslint-disable-next-line @typescript-eslint/no-explicit-any
              <p className="err">{(errors.images as any).message ?? "‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏•‡∏∑‡∏≠‡∏Å‡∏£‡∏π‡∏õ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏£‡∏π‡∏õ"}</p>
            )}
          </div>
          <div className="pt-6 border-t border-gray-200">
            <button 
              className="btn-primary w-full text-lg font-semibold py-3 transition-all duration-200 hover:shadow-lg"
              disabled={submitStatus === 'loading'}
              type="submit"
              onClick={(e) => {
                console.log('üñ±Ô∏è Submit button clicked!');
                const formData = watch();
                console.log('üìã Current form data:', formData);
                console.log('‚ùå Current errors:', errors);
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏ß‡πà‡∏≤‡∏°‡∏µ‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô‡∏´‡∏£‡∏∑‡∏≠‡πÑ‡∏°‡πà
                if (!formData.level || !formData.subject || !formData.unit_name) {
                  console.log('‚ö†Ô∏è Missing required basic fields');
                  setSubmitStatus('error');
                  setSubmitMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡∏û‡∏∑‡πâ‡∏ô‡∏ê‡∏≤‡∏ô: ‡∏£‡∏∞‡∏î‡∏±‡∏ö‡∏ä‡∏±‡πâ‡∏ô, ‡∏ß‡∏¥‡∏ä‡∏≤, ‡πÅ‡∏•‡∏∞‡∏ä‡∏∑‡πà‡∏≠‡∏´‡∏ô‡πà‡∏ß‡∏¢‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ');
                  e.preventDefault();
                  return;
                }
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå
                const validObjectives = formData.objectives?.filter(obj => obj && obj.trim() !== '') || [];
                if (validObjectives.length === 0) {
                  console.log('‚ö†Ô∏è No valid objectives');
                  setSubmitStatus('error');
                  setSubmitMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏à‡∏∏‡∏î‡∏õ‡∏£‡∏∞‡∏™‡∏á‡∏Ñ‡πå‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏£‡∏π‡πâ‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠');
                  e.preventDefault();
                  return;
                }
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°
                const validActivities = formData.activities?.filter(act => act && act.trim() !== '') || [];
                if (validActivities.length === 0) {
                  console.log('‚ö†Ô∏è No valid activities');
                  setSubmitStatus('error');
                  setSubmitMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏Å‡∏¥‡∏à‡∏Å‡∏£‡∏£‡∏°‡∏Å‡∏≤‡∏£‡πÄ‡∏£‡∏µ‡∏¢‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏≠‡∏¢‡πà‡∏≤‡∏á‡∏ô‡πâ‡∏≠‡∏¢ 1 ‡∏Ç‡πâ‡∏≠');
                  e.preventDefault();
                  return;
                }
                
                // ‡πÄ‡∏ä‡πá‡∏Ñ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•
                if (!formData.assessment || formData.assessment.trim() === '') {
                  console.log('‚ö†Ô∏è No assessment');
                  setSubmitStatus('error');
                  setSubmitMessage('‚ùå ‡∏Å‡∏£‡∏∏‡∏ì‡∏≤‡∏Å‡∏£‡∏≠‡∏Å‡∏ß‡∏¥‡∏ò‡∏µ‡∏Å‡∏≤‡∏£‡∏õ‡∏£‡∏∞‡πÄ‡∏°‡∏¥‡∏ô‡∏ú‡∏•');
                  e.preventDefault();
                  return;
                }
                
                console.log('‚úÖ All validation passed, ready to submit');
              }}
            >
              {submitStatus === 'loading' ? (
                <div className="flex items-center justify-center gap-2">
                  <div className="animate-spin rounded-full h-5 w-5 border-b-2 border-white"></div>
                  ‡∏Å‡∏≥‡∏•‡∏±‡∏á‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å...
                </div>
              ) : (
                "üíæ ‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô"
              )}
            </button>
            
            <p className="text-xs text-gray-500 text-center mt-3">
              üí° ‡∏£‡∏∞‡∏ö‡∏ö‡∏à‡∏∞‡∏ö‡∏±‡∏ô‡∏ó‡∏∂‡∏Å‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÅ‡∏•‡∏∞‡∏û‡∏≤‡∏Ñ‡∏∏‡∏ì‡πÑ‡∏õ‡∏¢‡∏±‡∏á‡∏´‡∏ô‡πâ‡∏≤‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡πÅ‡∏ú‡∏ô‡∏Å‡∏≤‡∏£‡∏™‡∏≠‡∏ô‡∏ó‡∏µ‡πà‡∏™‡∏£‡πâ‡∏≤‡∏á‡πÄ‡∏™‡∏£‡πá‡∏à‡πÅ‡∏•‡πâ‡∏ß
            </p>
            
      
          </div>
        </form>
      </div>
      <style jsx global>{`
        .input, .select { 
          width: 100%; 
          border: 1px solid #e5e7eb; 
          border-radius: 0.5rem; 
          padding: 0.75rem 1rem; 
          background: white; 
          transition: all 0.2s;
        }
        .input:focus, .select:focus { 
          outline: none; 
          border-color: #3b82f6; 
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); 
        }
        .textarea { 
          width: 100%; 
          min-height: 120px; 
          border: 1px solid #e5e7eb; 
          border-radius: 0.5rem; 
          padding: 0.75rem 1rem; 
          background: white; 
          resize: vertical;
          transition: all 0.2s;
        }
        .textarea:focus {
          outline: none; 
          border-color: #3b82f6; 
          box-shadow: 0 0 0 3px rgba(59, 130, 246, 0.1); 
        }
        .btn, .btn-primary, .btn-success, .btn-danger { 
          padding: 0.5rem 1rem; 
          border-radius: 0.5rem; 
          border: 1px solid #e5e7eb; 
          transition: all 0.2s; 
          font-weight: 500;
          cursor: pointer;
          display: inline-block;
          width: 35%;

        }
        .btn-primary { 
          background: #2563eb !important; 
          color: white !important; 
          border: none !important; 
          width: 100% !important;
          cursor: pointer !important;
          display: block !important;
        }
        .btn-success { 
          background: #10b981; 
          color: white; 
          border: none; 
        }
        .btn-danger { 
          background: #ef4444; 
          color: white; 
          border: none; 
          padding: 0.25rem 0.5rem;
          font-size: 0.875rem;
        }
        .btn:hover { 
          background: #f3f4f6; 
        }
        .btn-primary:hover:not(:disabled) { 
          background: #1d4ed8; 
        }
        .btn-success:hover { 
          background: #059669; 
        }
        .btn-danger:hover { 
          background: #dc2626; 
        }
        .err { 
          color: #dc2626; 
          font-size: 0.875rem; 
          margin-top: 0.25rem; 
        }
      `}</style>
    </div>
  );
}